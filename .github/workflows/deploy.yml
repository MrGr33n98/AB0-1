# GitHub Actions CI/CD Workflow
# This workflow automates testing, building, and deploying the application.

name: CI/CD - Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # ====================================================================
  # CI Job: Run linters and tests
  # ====================================================================
  ci:
    name: Run Linters & Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Placeholder for Backend Tests (e.g., RSpec)
      - name: Run Backend Linter & Tests
        run: |
          echo "==> Setting up Ruby environment"
          # In a real scenario, you would set up Ruby and run:
          # bundle install
          # bundle exec rubocop
          # bundle exec rspec
          echo "==> Skipping backend tests for now."

      # Placeholder for Frontend Tests (e.g., Jest)
      - name: Run Frontend Linter & Tests
        run: |
          echo "==> Setting up Node.js environment"
          # In a real scenario, you would set up Node.js and run:
          # npm install
          # npm run lint
          # npm run test
          echo "==> Skipping frontend tests for now."

  # ====================================================================
  # Build & Push Job: Build images and push to GitHub Container Registry
  # ====================================================================
  build-and-push:
    name: Build & Push to GHCR
    needs: ci # This job depends on the 'ci' job
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only run on push to main
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Needed to push to GitHub Container Registry

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Backend Image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/ab0-backend
          # Use lowercase for image name
          IMAGE_ID=$(echo $IMAGE_ID | tr '[:upper:]' '[:lower:]')
          docker build -t $IMAGE_ID:latest -t $IMAGE_ID:${{ github.sha }} ./AB0-1-back
          docker push $IMAGE_ID --all-tags

      - name: Build and Push Frontend Image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/ab0-frontend
          # Use lowercase for image name
          IMAGE_ID=$(echo $IMAGE_ID | tr '[:upper:]' '[:lower:]')
          docker build -t $IMAGE_ID:latest -t $IMAGE_ID:${{ github.sha }} ./AB0-1-front
          docker push $IMAGE_ID --all-tags

  # ====================================================================
  # Deploy Job: Deploy to the production VM
  # ====================================================================
  deploy:
    name: Deploy to VM
    needs: build-and-push # This job depends on the 'build-and-push' job
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VM via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_KEY }}
          script: |
            set -e
            echo "==> Navigating to app directory"
            cd ~/ab0-app

            echo "==> Logging in to GitHub Container Registry"
            echo ${{ secrets.GH_PAT }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            echo "==> Pulling latest images"
            docker compose pull

            echo "==> Restarting services with new images"
            docker compose up -d --force-recreate --remove-orphans

            echo "==> Running database migrations"
            docker compose exec backend rails db:migrate

            echo "==> Cleaning up old images"
            docker image prune -af

            echo "==> Deployment successful!"